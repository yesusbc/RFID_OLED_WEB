/*
 * Codigo para leer el ID de las credenciales y enviar la info a firebase en formato []
*/
/*
 ***** Notas:
 *El pin de A0 del arduino equivale al pin de ADC del NodeMCU
 *
 * RFID:
 * SDA -- D8
 * sck -- D5
 * MOSI -- D7
 * MISO -- D6
 * RST -- D4
 * 
 * 
 * OLED:
 * SCL -- D1
 * SDA -- D2
 */

 // Tutorial de tonos https://openwebinars.net/blog/tutorial-de-arduino-sonidos-con-arduino/

 //Convertir imagenes a bmp hex http://www.digole.com/tools/PicturetoC_Hex_converter.php



#include <ESP8266WiFi.h>
#include <FirebaseArduino.h>
#include <string>
#include <stdlib.h>
//#include <ArduinoJson.h>

#include <TimeLib.h>
#include <WiFiUdp.h>

//************************************************************ Include OLED *****************************
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


#define OLED_RESET LED_BUILTIN
Adafruit_SSD1306 display(OLED_RESET);

int pinzumbador = D0;    // pin del zumbador
int frecuencia = 440;      // frecuencia correspondiente a la nota La

//************************************************************ Include OLED *****************************

//******************* Configuración de la red y firebase ******************
//#define FIREBASE_HOST "addsensor-e3c86.firebaseio.com"
#define FIREBASE_HOST "lista-intro.firebaseio.com"

#define FIREBASE_AUTH "KRpH5FCRLus5SuPT3qRxjWj8keJ7TlS37T6zGW0E"
#define WIFI_SSID "ZonaPrueba"
#define WIFI_PASSWORD "ZonaPrueba"
//#define WIFI_SSID "Esta_no_es_una_red"
//#define WIFI_PASSWORD "Dm7v6KhfT6"
int n = 0;

//******************* FIN Configuración de la red y firebase ******************
int timeSinceLastRead = 0; //Para el sensor
float h = 0.0;
float t = 0.0;
int regTemp = 0;
int regHume =0;
const int temperaturePin = A0;
String myTimeStamp="";
String timeStamp="";
String fechaClase="";

//***********************************    OLED   ********************************************************



const unsigned char itc [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0xC0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x00, 0x40, 0x00, 0xB0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x17, 0xFF, 0xE0, 0x00, 0x8F, 0xFF, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x60, 0x00, 0x18, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x0F, 0xE0, 0x01, 0x00, 0x00, 0x80, 0x7F, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x3F, 0x00, 0x01, 0x01, 0x80, 0x04, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x02, 0x06, 0x00, 0x04, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x08, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x30, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x40, 0x1F, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x40, 0x60, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x81, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x81, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x04, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x02, 0x40, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x03, 0x40, 0x41, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xE0, 0x3F, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x30, 0x00, 0x04, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x04, 0x00, 0x00,
0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00,
0x00, 0x00, 0x0A, 0x00, 0x20, 0x00, 0x00, 0xA0, 0x20, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x06, 0x00, 0x20, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char espera [] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1c,0x00,0x03,0xfc,0x1c,0xfc,0x00,0x7f,0x01,0xce,0x0f,0xf0,0x00,0x00
,0x00,0x00,0x1c,0x00,0x07,0xfe,0x1d,0xff,0x01,0xff,0x81,0xde,0x3f,0xf8,0x00,0x00
,0x00,0x00,0x1c,0x00,0x0f,0x9c,0x1f,0x9f,0x83,0xe7,0xc1,0xfe,0x3c,0x78,0x00,0x00
,0x00,0x00,0x1f,0xfe,0x0e,0x00,0x1e,0x07,0x87,0x81,0xe1,0xf0,0x10,0x3c,0x00,0x00
,0x00,0x00,0x1f,0xfe,0x0f,0x00,0x1e,0x03,0xc7,0x00,0xe1,0xe0,0x00,0x1c,0x00,0x00
,0x00,0x00,0x1f,0xfe,0x0f,0x80,0x1c,0x01,0xc7,0x00,0xe1,0xe0,0x00,0x1c,0x00,0x00
,0x00,0x00,0x1c,0x00,0x07,0xf0,0x1c,0x01,0xc7,0xff,0xe1,0xc0,0x1f,0xfc,0x00,0x00
,0x00,0x00,0x1c,0x00,0x03,0xfc,0x1c,0x01,0xc7,0xff,0xe1,0xc0,0x3f,0xfc,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x7e,0x1c,0x01,0xc7,0xff,0xe1,0xc0,0x78,0x1c,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x1e,0x1c,0x03,0xc7,0x00,0x01,0xc0,0x70,0x1c,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x0e,0x1e,0x03,0x87,0x00,0x01,0xc0,0x70,0x3c,0x00,0x00
,0x00,0x00,0x1c,0x00,0x0e,0x1e,0x1f,0x07,0x83,0xc1,0xc1,0xc0,0x78,0x7c,0x00,0x00
,0x00,0x00,0x1f,0xff,0x9f,0xfe,0x1f,0xff,0x03,0xff,0xc1,0xc0,0x7f,0xfc,0x00,0x00
,0x00,0x00,0x1f,0xff,0x8f,0xfc,0x1d,0xfe,0x01,0xff,0x81,0xc0,0x3f,0xdc,0x00,0x00
,0x00,0x00,0x1f,0xff,0x81,0xf0,0x1c,0x78,0x00,0x7e,0x01,0xc0,0x0f,0x9c,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const unsigned char error [] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe3,0x0f,0x1c,0x03,0xf8,0x00,0xe1,0x80,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xef,0x0f,0x3c,0x0f,0xfe,0x00,0xe7,0x80,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xff,0x0f,0x7c,0x1f,0xff,0x00,0xef,0x80,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xff,0x0f,0xfc,0x3f,0x1f,0x80,0xff,0x80,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xf8,0x0f,0xe0,0x7c,0x07,0xc0,0xfc,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0x01,0xf0,0x0f,0xc0,0x78,0x03,0xe0,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0x01,0xe0,0x0f,0x80,0x78,0x01,0xe0,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0x01,0xe0,0x0f,0x00,0xf0,0x01,0xe0,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0xf0,0x01,0xe0,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0xf0,0x01,0xe0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0xf0,0x01,0xe0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0xf0,0x01,0xe0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0x78,0x03,0xe0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x78,0x00,0x01,0xe0,0x0f,0x00,0x7c,0x03,0xc0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc1,0xe0,0x0f,0x00,0x3e,0x0f,0xc0,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc1,0xe0,0x0f,0x00,0x1f,0xff,0x80,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc1,0xe0,0x0f,0x00,0x0f,0xff,0x00,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0xc1,0xe0,0x0f,0x00,0x07,0xfc,0x00,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const unsigned char enviado [] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x0e,0x00,0x00,0x00,0x00
,0x00,0x00,0x3f,0xfc,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x0e,0x00,0x00,0x00,0x00
,0x00,0x00,0x3f,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00
,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00
,0x00,0x00,0x38,0x00,0x01,0x80,0x00,0x00,0x00,0xe0,0x01,0xce,0x01,0xc0,0x00,0x00
,0x00,0x00,0x38,0x00,0x77,0xe1,0xc0,0x73,0x83,0xfc,0x0f,0xee,0x07,0xf8,0x00,0x00
,0x00,0x00,0x38,0x00,0x7f,0xf1,0xc0,0xe3,0x87,0xfc,0x1f,0xfe,0x0f,0xfc,0x00,0x00
,0x00,0x00,0x38,0x00,0x78,0x78,0xe0,0xe3,0x82,0x0e,0x1c,0x1e,0x1e,0x1e,0x00,0x00
,0x00,0x00,0x3f,0xf8,0x70,0x38,0xe0,0xc3,0x80,0x0e,0x38,0x0e,0x3c,0x0e,0x00,0x00
,0x00,0x00,0x3f,0xf8,0x70,0x38,0x61,0xc3,0x80,0x0e,0x38,0x0e,0x38,0x06,0x00,0x00
,0x00,0x00,0x38,0x00,0x70,0x38,0x71,0xc3,0x87,0xfe,0x38,0x0e,0x38,0x06,0x00,0x00
,0x00,0x00,0x38,0x00,0x70,0x38,0x73,0x83,0x8f,0x8e,0x38,0x0e,0x38,0x06,0x00,0x00
,0x00,0x00,0x38,0x00,0x70,0x38,0x3b,0x83,0x8e,0x0e,0x38,0x0e,0x38,0x06,0x00,0x00
,0x00,0x00,0x38,0x00,0x70,0x38,0x3f,0x03,0x8e,0x0e,0x38,0x0e,0x1c,0x0e,0x00,0x00
,0x00,0x00,0x38,0x00,0x70,0x38,0x1f,0x03,0x8e,0x1e,0x1e,0x3e,0x1e,0x1e,0x00,0x00
,0x00,0x00,0x3f,0xfc,0x70,0x38,0x1f,0x03,0x8f,0xfe,0x0f,0xfe,0x0f,0xfc,0x00,0x00
,0x00,0x00,0x3f,0xfc,0x70,0x38,0x1e,0x03,0x87,0xf6,0x07,0xee,0x07,0xf8,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
//***********************************    OLED   ********************************************************

//***********************************    Reloj   ********************************************************
// NTP Servers:
static const char ntpServerName[] = "us.pool.ntp.org";
const int timeZone = -5;  // Eastern Standard Time (USA)


String segundos, minutos, hora, dia, mes, ano;
String aux;

WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

time_t getNtpTime();
void digitalClockDisplay();
void printDigits(int digits);
void sendNTPpacket(IPAddress &address);

//***********************************    Fin Reloj   ********************************************************
//***********************************    Lector RFID   ********************************************************
#include <SPI.h>
#include <MFRC522.h>
#define RST_PIN         D4 // Configurable, see typical pin layout above
#define SS_PIN          D8         // Es el SDA

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
MFRC522::MIFARE_Key key;
String matriculaAlumno;

//***********************************    Fin Lector RFID *****************************************************

//***********************************    Set UP  *************************************************************
void setup() {
  Serial.begin(9600);
  pinMode(12, OUTPUT);
  // connect to wifi.
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("connected: ");
  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());

//****** del reloj

  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  boolean n = true;
  while(n){
    time_t t_aux = getNtpTime();
    if (t_aux != 0){
      setSyncProvider(getNtpTime);
      Serial.println("Done----");
      n = false;
      }
    }
  setSyncInterval(300);

//*** Fin del reloj

  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);

//*** Config MFRC522

  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
  display.begin(SSD1306_SWITCHCAPVCC);
}

time_t prevDisplay = 0; // when the digital clock was displayed

//******************************************************************************************************************
//***********************************    Rutina Principal   ********************************************************
//******************************************************************************************************************
void printHex(byte *buffer, byte bufferSize);
void sendFireBase();
void miSetup();
void loop() {
  
  display.clearDisplay();
  display.drawBitmap(0,0,itc,128,64, WHITE);   //Desplegamos Logo ITC
  display.display();

  
//****************** Leemos hasta detectar una tarjeta ************************************************* 
 // Look for new cards
  
  if (  mfrc522.PICC_IsNewCardPresent()) {
      //return;
      //}  //Corche ID 1

  // Select one of the cards
  if (mfrc522.PICC_ReadCardSerial()) {
    //return;
      //} //Corche ID 2
     Serial.println("XXXXXX");     
     printHex(mfrc522.uid.uidByte, mfrc522.uid.size);
     Serial.println("XXXXXX");
     delay(20);
// ********************************************************* 
     //____________
    display.clearDisplay();
    display.drawBitmap(0,0,espera,128,64, WHITE);
    display.display();
    delay(20);
  
// ***************************************  Revisemos la hr

  if (timeStatus() != timeNotSet) {
    if (now() != prevDisplay) { //update the display only if time has changed
      prevDisplay = now();
      ano = String(year());
      mes = String(month());
      dia = String(day());
      hora = String(hour());
      aux="";
      printDigits(minute());
      minutos = aux;
      aux="";
      printDigits(second());
      segundos = aux;
      
      Serial.println("TimeStamp: "+ ano + "/"+ mes +"/"+ dia +"-"+ hora +":"+ minutos +":"+ segundos);
      timeStamp = "" + ano + "-"+ mes +"-"+ dia +"-"+ hora +":"+ minutos +":"+ segundos;
      fechaClase = "" + ano + "-"+ mes +"-"+ dia;
      Serial.println("timeStamp: " +timeStamp);
      Serial.println("Fecha Clase: "+ fechaClase);
    }
  }
   //****************** Fin del reloj ************************************************* 


    //****************** Enviamos a Firebase **************************************************************  
   sendFireBase();
  }
  }
  else {
    return;
  }

  
}

//******************************************************************************************************************
//*********************************** Fin Rutina Principal  ********************************************************
//******************************************************************************************************************


// ************************************************ Funciones del Reloj *****************************************

void printDigits(int digits)
{

  if (digits < 10)
    aux = '0';
  aux = aux + String(digits);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime()
{
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0) ; // discard any previously received packets
  Serial.println("Transmit NTP Request");
  // get a random server from the pool
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
// ************************************************ Funciones del Reloj *********************************************************************************




/**
 * Helper routine to dump a byte array as hex and dec values to Serial.
 */
void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);

    if(buffer[i] < 0x10){
      matriculaAlumno += "0" + String(buffer[i], HEX);
      }
      else{
        matriculaAlumno +=  String(buffer[i], HEX);
        }

  } 
   Serial.println("");

     Serial.println(matriculaAlumno);
}


/**
 ************ Helper enviar a firebase
 */

void sendFireBase(){  //Rutina para enviar la info a FireBase

  //Reproducimos sonido

    tone(pinzumbador,frecuencia);    // inicia el zumbido
    delay(1500);                    
    noTone(pinzumbador);

    
String timeStamp2 = String(timeStamp);
Serial.println("");
Serial.println("prueba time string " + timeStamp2);

//DynamicJsonBuffer jsonBuffer;
StaticJsonBuffer<200> jsonBuffer;
JsonObject& root2 = jsonBuffer.createObject();
  root2["IDAlumno"] = matriculaAlumno;
  root2["timestamp"] = timeStamp2;


  // append a new value to /logs
  String name = Firebase.push(fechaClase, root2);
  
  // handle error
  if (Firebase.failed()) {
      Serial.print("pushing /logs failed:");
      Serial.println(Firebase.error()); 
      //Intentamos escribir
       display.clearDisplay(); 
       display.drawBitmap(0,0,error,128,64, WHITE);
       display.display();
       delay(1000);
       miSetup();

      return;
  }
  Serial.print("pushed: /logs/");
  Serial.println();
  root2.prettyPrintTo(Serial);
  display.clearDisplay();
  display.drawBitmap(0,0,enviado,128,64, WHITE);
  display.display();
  matriculaAlumno ="";
  delay(1500);
  }


void miSetup(){
    Serial.flush();
    Serial.end();
    delay(100);
  //variables
       n = 0;      
       timeSinceLastRead = 0; //Para el sensor
       h = 0.0;
       t = 0.0;
       myTimeStamp="";
       timeStamp="";
       fechaClase="";
       matriculaAlumno= "";
  Serial.begin(9600);
  pinMode(12, OUTPUT);
  // connect to wifi.
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("connected: ");
  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());

//****** del reloj

  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  boolean n = true;
  while(n){
    time_t t_aux = getNtpTime();
    if (t_aux != 0){
      setSyncProvider(getNtpTime);
      Serial.println("Done----");
      n = false;
      }
    }
  setSyncInterval(300);

//*** Fin del reloj

  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);

//*** Config MFRC522

  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
  display.begin(SSD1306_SWITCHCAPVCC);

  return;
}


